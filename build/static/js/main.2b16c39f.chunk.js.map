{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","today","axios","get","then","rs","data","covid","setState","this","getcovid","className","src","logo","alt","NewConfirmed","Confirmed","Recovered","NewDeaths","UpdateDate","href","target","rel","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,4OCKtBC,E,kDACnB,WAAaC,GAAQ,IAAD,8BAClB,gBACKC,MAAQ,CACXC,MAAO,IAHS,E,uDAMP,IAAD,OACVC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GAAE,OAAIA,EAAGC,QACdF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEP,MAAOM,S,0CAKzBE,KAAKC,a,+BAIL,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yDAC6B,0BAAMH,UAAU,eAAeF,KAAKT,MAAMC,MAAMc,cAD7E,WAEA,6BAFA,cAEgB,0BAAMJ,UAAU,gBAAgBF,KAAKT,MAAMC,MAAMe,WAFjE,kBAEiG,0BAAML,UAAU,gBAAgBF,KAAKT,MAAMC,MAAMgB,YAClJ,6BALF,cAMcR,KAAKT,MAAMC,MAAMiB,WAE/B,2CAAiBT,KAAKT,MAAMC,MAAMkB,WAAlC,IAA8C,6BAA9C,wBACA,uBACER,UAAU,WACVS,KAAK,+BACLC,OAAO,SACPC,IAAI,uBAJN,gCADA,IAQK,6BARL,kCASA,uBACAF,KAAK,wCACLE,IAAI,sBACJD,OAAO,SACPE,MAAM,YAJN,+C,GAvCyBC,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b16c39f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.91183710.png\";","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport axios from 'axios';\n\nexport default class App extends Component {\n  constructor (props) {\n    super()\n    this.state = {\n      today: {}\n    }\n  }\n  getcovid () {\n    axios.get('https://covid19.th-stat.com/api/open/today')\n    .then(rs => rs.data)\n    .then(covid => {\n      this.setState({ today: covid })\n    })\n  }\n\n  componentDidMount() {\n    this.getcovid()\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Covid 19 New case today is <span className='text-danger'>{this.state.today.NewConfirmed}</span> people.\n          <br/>Total case <span className='text-warning'>{this.state.today.Confirmed}</span> and recovered <span className='text-success'>{this.state.today.Recovered}</span></p>\n          <br/>\n          New Deaths {this.state.today.NewDeaths}\n        </header>\n        <p>Last updated {this.state.today.UpdateDate} <br/> Data source from&nbsp;\n        <a\n          className=\"App-link\"\n          href=\"https://covid19.th-stat.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://covid19.th-stat.com/\n        </a> <br/>This project is opensource &nbsp;\n        <a \n        href=\"https://gitlab.com/apinan/covidetoday\" \n        rel=\"noopener noreferrer\" \n        target=\"_blank\" \n        class=\"App-link\">https://gitlab.com/apinan/covidetoday</a></p>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}